'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = exports.toString = exports.reset = exports.StyleSheet = exports.css = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = aphroditeJss;

var _jss = require('jss');

var _jssPresetDefault = require('jss-preset-default');

var _jssPresetDefault2 = _interopRequireDefault(_jssPresetDefault);

var _murmurhash3_gc = require('murmurhash-js/murmurhash3_gc');

var _murmurhash3_gc2 = _interopRequireDefault(_murmurhash3_gc);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var meta = 'aphrodite-jss';
var isNotFalsy = function isNotFalsy(val) {
  return !!val;
};
var getClassName = function getClassName(rule) {
  return rule.className;
};
var generateClassName = function generateClassName(name, str) {
  return name + '-' + (0, _murmurhash3_gc2['default'])(name + str + meta);
};
var mergeStyles = function mergeStyles(style, rule) {
  return _extends({}, style, rule.style);
};

function aphroditeJss(jss, options) {
  var renderSheet = function renderSheet() {
    return jss.createStyleSheet(null, _extends({ meta: meta }, options)).attach();
  };

  var sheet = renderSheet();

  function css() {
    for (var _len = arguments.length, rules = Array(_len), _key = 0; _key < _len; _key++) {
      rules[_key] = arguments[_key];
    }

    // Filter falsy values to allow `css(a, test && c)`.
    rules = rules.filter(isNotFalsy);

    if (!rules.length) return '';

    // A joined class name from all rules.
    var className = rules.map(getClassName).join('--');

    if (sheet.getRule(className)) return className;

    var style = rules.reduce(mergeStyles, {});
    sheet.addRule(className, style, { selector: '.' + className });

    return className;
  }

  function register(styles) {
    return Object.keys(styles).reduce(function (map, name) {
      if (name[0] === '@') {
        sheet.addRule(name, styles[name]);
        return map;
      }
      map[name] = {
        className: generateClassName(name, JSON.stringify(styles[name])),
        style: styles[name]
      };
      return map;
    }, {});
  }

  function reset() {
    jss.removeStyleSheet(sheet);
    sheet = renderSheet();
  }

  return {
    StyleSheet: { create: register },
    toString: function toString() {
      return sheet.toString();
    },
    css: css,
    reset: reset,
    version: "2.1.0"
  };
}

var _aphroditeJss = aphroditeJss((0, _jss.create)((0, _jssPresetDefault2['default'])()));

var css = _aphroditeJss.css,
    StyleSheet = _aphroditeJss.StyleSheet,
    reset = _aphroditeJss.reset,
    toString = _aphroditeJss.toString,
    version = _aphroditeJss.version;
exports.css = css;
exports.StyleSheet = StyleSheet;
exports.reset = reset;
exports.toString = toString;
exports.version = version;